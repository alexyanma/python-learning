|- 0301 程序逻辑
    |- 目的是使程序开发的过程更加的方便
    |- 程序的逻辑定义中一共有三个定义的逻辑形式
        - 顺序结构
        - 分支结构
        - 循环结构
    |- 顺序结构
        - 代码按顺序执行不可逆行
    |- 分支结构
        - 代码按选择条件执行
    |- 循环结构
        - 根据条件重复执行同一段代码

|- 0302 分支结构
    |- 三个主要的关键字
        - if
        - elif （else if）
        - else
    |- Python使用缩进表现分支结构
        - 分支代码范围：
        if 布尔表达式：       # ： 不可缺少
            满足条件时执行     # 分支内代码
        else：               # ： 不可缺少
            不满足条件时执行    # 分支内代码
        满足条件时执行         # 不在分支内代码
    |-
    score = 95.00
    if 90.00 <= score <= 100:
        print('优等生')
    elif 60 <= score < 90.00:
        print('一般学生')
    else:
        print('坏学生')
    ------------------------------
    优等生

|- 0303 断言
    - 所谓的断言， 当程序执行到某一条语句时，一定是其预计的结果
        - 当满足条件时程序可以正常执行， 如果不满足条件自动中断执行
        - 可以为断言设置错误信息
    - 用于test
    - 关键字 assert
    # 断言
    age = 16
    assert 18 <= age < 50   # 设定断言条件
    print('满足年龄条件， 你的年龄是 %d' % age)
    -------------------
        assert 18 <= age < 50
AssertionError
    # 添加断言，错误信息
    age = 16
    assert 18 <= age < 50, 'age 变量处理结果错误'   # 设定断言条件和断言错误信息
    print('满足年龄条件， 你的年龄是 %d' % age)
    --------------------
    assert 18 <= age < 50, 'age 变量处理结果错误'
AssertionError: age 变量处理结果错误
    - 通过断言可以直接查找出程序的错误， 由于断言不受程序逻辑的控制，实际开发中慎用（基本不用）


|- 0304 while循环
    - 循环机构指的是某段代码可以被重复利用， 一般在循环结构中都需要定义一个循环的结束条件，只有在循环结束
    条件不满足的时候循环才会执行
    |- while循环
        - 是通过一个循环的结束判断条件来决定当前的循环代码体是否要被执行
        - Python语言中的while循环语法形式主要分成两类
        - 传统while循环
        - while ... else 循环
    |- while 循环判断
        循环语句
        修改循环结束条件
    |- while 循环判断
        循环语句
        修改循环结束条件
       else
        循环语句执行完毕后执行的代码  # 这种else的使用和分支结构中的else的使用形式非常类似
                                 # 都是在全部执行完毕后，条件都不满足的情况下执行
        - # while 循环 1 ～ 100 的数字累加
        sum = 0
        num = 1
        while num <= 100:   # 设定循环判断
            sum += num      # 执行数字的累加
            num += 1        # 修改循环条件
        else:
            print('数字累加计算结果：%d， 当前计数的值是 %d' % (sum, num))  # num的值是101， 不满足循环条件退出循环
        print('循环之外的代码, 打印累加的值 %d' %  sum)
        ------------------------------------------------
        数字累加计算结果：5050， 当前计数的值是 101
        循环之外的代码, 打印累加的值 5050
    |- 斐波那契数字数列， 1、1、2、3、5、8、13、21
        - # 实现1000以内的斐波那契数列打印
        num_1 = 0
        num_2 = 1
        while num_2 < 1000:
            print(num_2, end='、')
            num_1, num_2 = num_2, num_1 + num_2  # Python 特有的赋值语句， 把num_2的值赋值给num_1,
                                                 # [同时]修改num_2的值为num_1 + num_2
            # 如果使用code
            # num_1 = num_2
            # num_2 = num_1 + num_2  # 在这步时， num_1的值已经被改变为当前num_2的值， 所以num_2 = num_2 ×２
    |- 使用同时赋值的方法去交互两个整数的值
        num_a = 10
        num_b = 5
        num_a, num_b = num_b, num_a     #给num_a赋值num_b， 同时给num_b赋值num_a
        print('num_a 的值是 %d' % num_a)
        print('num_b 的值是 %d' % num_b)


|- 0305 for循环机构
    - for循环在Python里面主要的功能是输出指定范围内的数据操作， 也就是说 如果现在一个给定的范围循环5次，它就会循环5次
    - for循环主要分为两类
        - for 循环
        - for ... else 循环
    - for 循环
        for 变量 in 序列：
            循环语句
    - for .... else 循环
        for 变量 in 序列：
            循环语句
        else：
            循环语句执行完后的语句
    - 循环一个序列
        for num in {1, 3, 5}:    # 设定一个循环序列
        print(num, end=', ')

    - rang() 函数
        - 每一次for循环里面都会自动获取一个给定范围中的元素，但是如果循环1000呢？为了解决这个问题python提供一个range（）函数
        - # range(max)函数, max 设定循环次数， 这个起始值默认为0 到终止值 max -1， 循环的值小于max
        for num in range(10):   # range(max)
            print(num, end=', ')
        ----------------------------------------
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9,

        - 指定起始值
        for num in range(5, 10):   # range(start， end)， 从指定起始值开始，循环到指定结束值【前】结束
            print(num, end=', ')
        ----------------------------------------
            5, 6, 7, 8, 9,
        - 指定步长
        for num in range(5, 10, 2):   # range(start， end， step)
            print(num, end=', ')
        ----------------------------------------
        5, 7, 9,

    - 使用for 循环计算1 ～ 100的数字累加
        sum = 0
        for num in range(1, 101):
            sum += num
        print('累加计算的结果是 %d' % sum)

    - 使用for循环迭代一个字符串
        msg = 'alexyanma@gmail.com'
        for c in msg:
            print(c, end=',')
    - 利用循环和编码实现一个字符串小写转大写的操作
        - 编码函数ord(), ord('a') = 97 小写a的编码是97；ord('z') = 122, 小写z的编码是122
        - 反编码函数 chr(), chr(100)  = 'd'
        msg = 'alexyanma@gmail.com'
        for item in msg:
            if 97 <= ord(item) <= 122:  # 如果是小写字符的编码
                print((chr(ord(item) - 32)), end=',')    # 小写转大写编码-32
            else:
                print(item, end=',')    # 如果不是小写字符的编码， 直接输出
        ----------------------------------------------------------------------
        A,L,E,X,Y,A,N,M,A,@,G,M,A,I,L,.,C,O,M,


|- 0306 循环控制语句
    - 循环控制语句主要是控制当前的循环结构是否继续向下执行。
    - continue 和 break
    - continue控制循环
        for num in range(1, 10):
            if num == 3:    # 设定分支条件
            continue    # 当满足分支条件时， 不再执行本次循环值中的下面代码， 循环没有被打断
        print(num, end=', ')
        ----------------------------------------
        1, 2, 4, 5, 6, 7, 8, 9,

    - break 控制循环
        for num in range(1, 10):
            if num == 3:    # 设定分支条件
                break    # 当满足分支条件时， 打断循环， 执行跳出循环操作
            print(num, end=', ')
        else:
            print('跳出循环， 当前执行数字为 %d' % num)   # 当跳出循环时， else 循环语句也会一并跳出
        ----------------------------------------
        1, 2,

|- 0307 循环嵌套
    - 循环嵌套会增加执行时间复杂度big O的平方
    - 简单双层循环嵌套
        for x in range(1, 4):       # 设定x从1开始, 默认是0
            for y in range(1, 4):   # 设定y从1开始, 默认是0
                print('第 %d 次循环， y= %d' % (x, y))
        ----------------------------------------
        第 1 次循环， y= 1
        第 1 次循环， y= 2
        第 1 次循环， y= 3
        第 2 次循环， y= 1
        第 2 次循环， y= 2
        第 2 次循环， y= 3
        第 3 次循环， y= 1
        第 3 次循环， y= 2
        第 3 次循环， y= 3

    - 经典方案， 打印乘法表
        for x in range(1, 10):
            for y in range(1, x + 1):  # 如果终止范围不加1， range（1， 1） y=1 则不会循环， range（1， 9）也不会执行y=9
                print('%d*%d=%d' % (x, y, x * y), end=' ')
            print()     # 需要增加手动换行
        ----------------------------------------
        1*1=1
        2*1=2 2*2=4
        3*1=3 3*2=6 3*3=9
        4*1=4 4*2=8 4*3=12 4*4=16
        5*1=5 5*2=10 5*3=15 5*4=20 5*5=25
        6*1=6 6*2=12 6*3=18 6*4=24 6*5=30 6*6=36
        7*1=7 7*2=14 7*3=21 7*4=28 7*5=35 7*6=42 7*7=49
        8*1=8 8*2=16 8*3=24 8*4=32 8*5=40 8*6=48 8*7=56 8*8=64
        9*1=9 9*2=18 9*3=27 9*4=36 9*5=45 9*6=54 9*7=63 9*8=72 9*9=81

    - 经典方案， 打印三角形
    #     *
    #    * *
    #   * * *
    #  * * * *
    # * * * * *
    # 分析
    # 第一行空格、空格、空格、空格、*              -- 4个空格 + 1个*
    # 第二行空格、空格、空格、*、 空格、*           -- 3个空格 + (* + 空格） × 2
    # 第三行空格、空格、*、 空格、*、 空格、*       -- 2个空格 +  (* + 空格） × 3
    # 第四行空格、*、空格、*、空格、*、空格、*      -- 1个空格 + (* + 空格） × 4
    # 第五行*、空格、*、空格、*、空格、*、空格、*    --   (* + 空格） × 5
        line = 5        # 定义总共打印的行数
        for x in range(0, line):
            for z in range(0, line - x):    # 循环打印空格， x在增加的时候，它的循环输出就越小
                print('', end=' ')
            for y in range(0, x + 1):       # 循环打印 * + 空格, x在增加的时候，它的循环输出就越大, 因为x开始为0，所以必须x+1， 是其循环第一次
                print('*', end=' ')
            print()                         # 手动换行
        - 这个打印三角形其实是非Python的做法， 是其他编程语言的经典做法

    - Python 打印三角形
        - 使用字符串的乘法操作， 避免使用嵌套循环
        line = 10
        for x in range(0, line):
            print(' ' * (line - x), end=' ')
            print('* ' * (x + 1))
