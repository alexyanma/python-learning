第一个python程序
python的程序注释：
单行注释#
多行注释''' (单引号)或是 """（双引号）
------------------------------------------------------------
标识符（Identifier）和关键字（keyword）

------------------------------------------------------------
变量和常量
变量是指内容可以被改变的一块内存
常量是指内容不可以被修改的一块内存
变量就是一种标识符的概念

python 可以直接定义变量

example：
num = 100 # 定义一个变量num， 初始化的内容为一个常量（100）
num = 99  # 修改变量的内容， 但是常量的内容没有改变。 （用一个99的常量代替了原先的100）
print(num)
-----------
99

所有变量、常量都会占用内存空间

删除变量
关键字： del

example:
num_c = 10
del num_c  # 删除变量num_c
print(num_c) # throw exception
---------------
NameError: name 'num_c' is not defined

note: python中的变量和常量都是一个object，这个object都有一个计数空间。 删除对象的操作就是设置这个计数空间为0
python虚拟机会根据计数空间对内存进行回收


---------------------------------------------------------------
数据类型的划分
整数、浮点数、复数、布尔类型、字符串、列表、元祖、字典、日期

在很多编程语言中都会将数据类型分为基本数据类型， 和引用类型
对于基本数据类型，就是一个数值传递的过程
对于引用类型就是一个内存空间的传递的过程， 而python严格意义上来讲是没有提供数值传递的
在python里所有的传递都属于引用传递， 传递的操作实际上就是一块数据保存的真实内存空间


--------------------------------------------------------------------

数值型
    - 整数
    - 小数（浮点数）
note： 各个传统的编程语言来讲， 整数 / 整数 = 整数 // 比如java  double a = 10 /3 结果为3
而python语言则认为这个结果应该包含小数 a = 10 / 3 # 结果为3.3333333333333335
python所有的变量都可能进行某些的自动类型转换处理

num_a = 10
num_b = 5
print(type(num_a))
print(type(num_a / num_b))   # 无论除法定结果是不是整数，python把除法的结果都转换为浮点型
----------
<class 'int'>
<class 'float'>

example
num_a = None
print(type(num_a))
num_a = 5
print(type(num_a))
num_a = 'Hello'
print(type(num_a))
-------------
<class 'NoneType'>
<class 'int'>
<class 'str'>

-------------------------------------------------------------------------
复数
python本身直接支持有复数的操作， 复数在使用之中分为实部和虚部，
对于复数的定义不能够直接使用整数那样的定义， 需要通过一个complex（）的function来完成
-- python 可以直接支持复数， 其他语言都不可以直接支持复数，必须通过其他方式来实现

num = complex(10, 2) # 实部为10， 虚部为2
print(type(num))
print(num)
--------------
<class 'complex'>
(10+2j)


example:
num = complex(10, 2) # 实部为10， 虚部为2
print(type(num))
print(num)
print(num.real)  # 找到复数的实部
print(num.imag)     # 找到复数的虚部
print(num. conjugate())
--------
<class 'complex'>
(10+2j)
10.0
2.0
(10-2j)

example：
num = complex(10, 2) # 实部为10， 虚部为2
print(num * 2)
--------------
(20+4j)

-----------------------------------------------------------
0207 布尔
布尔主要用于程序的逻辑分支处理。
python 是通过C语言开发的， 在C语言里对于布尔型的描述可以通过数字0（Flase)和非0（True)来描述
python很好的继承了此项特征， 也可以通过数学来表示

example： 使用数字来表示布尔型
flag = 1    # 非0代表True
if flag:    #　相当于 flag = true
    print('Flag is true')
-----------------------
Flag is

-------------------------------------------------------------
0208 字符串
字符串是程序里最重要的一项基础元素。
- 单引号和双引号都可以用来给字符串赋值
- 在python里面很多的字符串使用的都是单引号
- 使用引号要统一
- 不同的引号可以嵌套
- 三引号'''， 对字符串进行预处理
example 三引号
"""
comment here ....
"""
info = '''
    多行预处理，
        此处的字符串格式就是最后的显示格式
                。。。。

'''     # 此处的结尾引号不需要注意缩进
print(info)
----------------

    多行预处理，
        此处的字符串格式就是最后的显示格式
                。。。。
- 续航符 \ （类似java中连接字符串的+）和+ 号不同的地方是一个是多行一个是同一行. 加号只能使用在同一行
example 续航符

info = ' 多行预处理，' \
        ' 此处的字符串格式就是最后的显示格式 ' \
                '。。。。'     # 此处的结尾引号不需要注意缩进
print(info)
----------------
多行预处理， 此处的字符串格式就是最后的显示格式 。。。。

python的常用转义字符串
|- \    # 续航符
|- \\   # 等价于字符\
|-  \'  # 等价于字符单引号'
|- \"   # 等价于字符双引号"
|- \000 # 空字符串
|- \b   # 退格
|- \e   # 转义
|- \n   # 换行
|- \v   # 纵向制表符
|- \t   # 横向制表符
|- \r   # 回车
|- \f   # 换页
|- \0yy 八进制字符, \012为换行
|- \xyy 十进制字符, \xOa为换行

example: 转义字符

info = ' \"alex\"学Python:　\n \t极限科技：\'alexyanma.com\'' # \t 类似缩进
print(info)
--------------
 "alex"学Python:　
 	极限科技：'alexyanma.com'

-------------------------------------------------------------------
键盘数据输入
程序最大的特点是有交互性， 交互的过程之中最重要的内容就是进行数据的输入处理，
为此Python中提供有input()function， 利用此函数进行数据内容的输入
数据输入的类型都是字符型
example： 实现键盘的数据输入
input_data = input('>')
print('输入的信息： ' + input_data)
print('输入的数据类型：' )
print(type(input_data)) # print 系统信息不是字符类型， 不能连接字符串
-------------------------------
输入的信息： hello world
输入的数据类型：
<class 'str'>

输入数据的类型转换的处理操作
|- int()
    - example
str = '168'
temp = int(str)  # 将字符串转变为整型
print(temp)
print(type(temp))
-----------------
168
<class 'int'>
note: 如果输入数据不是数字，则会产生异常
int（） 不光可以转换字符类型，同时还可以转换其他类型
str = '168'
num_f = 118.2
print(type(num_f))
num_bol = True  #数字1 表示True
print(type(num_bol))
print(int(str) + int(num_f) + int(num_bol))    # 使用int转型String, float和Boolean类型
-------------
<class 'float'>
<class 'bool'>
287


|- float()
str = '168'
temp = float(str)  # 将字符串转变为整型
print(temp)
print(type(temp))
------------------
168.0
<class 'float'>

|- str()
example:　
    num_a = 10.2
    num_b = 12.34
    result = num_a + num_b
    print(num_a + '+' + num_b + '=' + result )  # must convert number to string
   -----------------------------------------
 print(num_a + '+' + num_b + '=' + result)
 TypeError: unsupported operand type(s) for +: 'float' and 'str'
note:
和Java不同， 所有的数字与字符串连接不能直接使用“+” ， 必须使用str()转换数字到字符串字符串

-------------------------------------------------------------------------------
0210 格式化输出
# 格式化字符串
# 一个内容  %数值
# 多个内容  %(数值,...,数值)
- %c    格式化字符
- %d    格式化整数
- %e    格式化科学计数法
- %g    %f和%e的简写
- %u    格式化无符号整型
- %x    格式化无符号十六进制数
- %s    格式化字符串
- %f    格式化浮点型，可以设置保留精度
- %E    格式化科学计数法
- %G    %f和%E的简写
- %o    格式化无符号八进制
- %X    格式化无符号十六进制
#格式化赋值标记
- *     定义宽度或者是小数点精度
- -     左对齐
- +     在正数前面显示加号
-  空格   显示位数不足时填充空格
- var   映射变量（字典参数）
- #     在八进制数前面显示（‘0’）， 在十六进制前面显示‘Ox’或者‘OX’
- 0     显示位数不足时填充0
- %     ‘%%’输出一个‘%’
- m.n   m设置显示的总宽度， n设置小数位

使用vars()函数格式化
name = 'alex'
age = 18
score = 97.5
print('name=%s, age=%d, score=%f' % (name, age, score))
print('name=%(name)s, age=%(age)d, score=%(score)f' % vars())
---------------------
name=alex, age=18, score=97.500000
name=alex, age=18, score=97.500000
自定义完结符号（end）
print('alex', end='   ')
print('alexyanma@gmail.com', end='--')
print('6656')
-----------------------
alex   alexyanma@gmail.com--6656


---------------------------------------
2011 运算符
赋值运算符 "="
数学运算符 "+, -, * , /, %, "
逻辑运算符 "not, or, and"
.....

2012 数学运算符
数学运算符 "+, -, * , /, %, **, //"
/   除法计算            # 和Java不同，无论整数除法还是复数除法，值都是float类型， 整除类型有单独形式 //
**  幂运算              # 10**３　＝　1000
//  整除计算， 返回商     #10//3 = 3
result = 1 + 3 - 4/2    # 只要有除法，值就是一个浮点类型
-----------
2.0
简化数学运算符
+=， -=， *=, /=, %=, **=, //=
简化运算符的作用就是简化数学运算之后把结果赋值给变量的过程，特别是使用变量进行数学计算后将结果重新覆盖变量（节省内存，不需要重新开一个新内存）
字符串的乘法操作
字符串的乘法操作可以简单进行字符串的重复处理
name = 'alex'
print(name *3)
－－－－－－－－－－－－
alexalexalex

--------------------------------------
0213 关系运算符
==, !=, >, <, >=, <=

字符串的比较
name = 'alex'
str_1 = 'alex'
print(name == str_1)
---------
True


多条件的数学关系运算符比较，可以省略逻辑运算符
print(10 <= 20 <= 30)       # java 必须使用and连接多个条件
---------
True

-------------------------------------
0214逻辑运算符
与、或、非
对关系表达式进行判断
and, or, not

result = name == 'alex' and age == 18
print(result)
---------------
True

not 求反操作
    - 类似java中！
result = name == 'alex' and not age == 180
print(result)
---------------
True

--------------------------------
0215 位运算符
对于高级语言（Python， Java）位运算的需求不是很大。 一般考虑在加密解密的计算
在计算机世界里面， 所有的数据存储和交互都是通过二进制完成的。在二进制的基础上又发展出8进制和16进制
十进制 --> 二进制     (除2取余) #
    25 / 2 = 12 r 1
    12 / 2 = 6  r 0
    6  / 2 = 3  r 0
    3  / 2 = 1  r 1
    1  / 2 = 0  r 1  # 重点here
    25 --> 二进制表示 = 11001
二进制 --> 八进制     (三位二进制转换一个八进制）
二进制 --> 十六进制    (四位二进制转换一个十六进制）


进制转换操作
二进制 bin
十进制 int
八进制 oct
十六进制 hex
十进制转换二进制

位运算是针对二进制进行操作
& 位与
| 位或
^ 位异或
~ 反码
<< 左移
>> 右移

位运算的结果表
# 重点表格
NO. num1    num2    与操作&    或操作|    异操作^
1    0       0        0         0         0
2    0       1        0         1         1
3    1       0        0         1         1
4    1       1        1         1         0

实际上为操作都是出现在最早内存不足的时候， 为了提升操作效率而准备的
例如：计算２的３次方
２　×　2 ×　２　＃　除了本来的２，　重新开辟了３块内存，　２，　４，　８　
但是通过位移操作
２＜＜２　＃　２左移两位，　二进制１０（２）　左移后为１０００　（８），　这样并没有开辟任何新的内存，只是在原先的内存中把２的值变成了８
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

0216 身份运算符
身份运算符是Python自己提供的一种运算符， 主要功能是进行完全相等的判读。
完全相等
｜－　内容和内存的双判断
｜－　is　和　is not
Python中的所有数据类型全部都属于引用类型
Python没有提供对引用的操作，但是提供了一个id的函数，这个function可以获取底层的内存地址
id（）函数是python中唯一一个可以与底层有交互的函数, 可以通过id函数查看变量（对象）的内存地址


# 相同的值共用同一个内存空间， python不会给已存在的值开辟多余的内存空间
num_a = 2
num_b = 1 + 1
num_c = 4 -2
print(id(num_a))
print(id(num_b))  # 1638131648
print(id(num_c))
----------------
1638131648
1638131648
1638131648

不同类型的数据比较
num_int = 2
num_float = 2.0
id_int = id(num_int)
id_float = id(num_float)
print('整数2的内存地址 %d, 浮点数2.0的地址是 %d， 整数2 是否等于浮点数2.0 %s' % (id_int, id_float, num_int == num_float))
------------------------------------------------
整数2的内存地址 1617684416,
浮点数2.0的地址是 1654544，
整数2 是否等于浮点数2.0 True

note:　整数２和浮点数２.０存储的内存地址不同，　在做比较的时候它们的值是相同的
    －　在做数值比较时，　Python把整数自动转换为浮点数进行比较，
num_int = 2
num_float = 2.0
print('完全身份判断 整数2 是否完全相等浮点数2.0 %s ' % (num_int is num_float))       # 判断完全相等
print('完全身份判断 整数2 是否完全不相等浮点数2.0 %s ' % (num_int is not num_float))  # 判断完全不相等
----------------
完全身份判断 整数2 是否完全相等浮点数2.0 False
完全身份判断 整数2 是否完全不相等浮点数2.0 True

在使用相等判断时， 身份运算符会提供有内存地址（id（））
在开发中的《常量》会保存在同一内存中

str_1 = 'abc'  # 常量  相同内存地址
str_2 = 'ab'
str_3 = str_2 + 'c'     # 变量
print(str_1)
print(id(str_1))
print(str_3)    # 不同内存地址， 值相同，内存存储地址不同
print(id(str_3))
str_4 = 'abc'   # 常量    相同内存地址
print(id(str_4))